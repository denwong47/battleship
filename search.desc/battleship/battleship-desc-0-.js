searchState.loadedDescShard("battleship", 0, "Battleship game\nDocumentation only files.\n<code>tokio</code> application, including the main <code>tide</code> routine to host …\n<code>clap</code> based CLI parameters parser, accepting command line …\nConfiguration module, containing constants, statics and …\nModule containing the main error type <code>AppError</code>\nLogging module, with public functions to print different …\nThe main handler for the whole app. Parses the CLI …\nA collection of structs and traits to facilitate the game.\nA <code>host.json</code> file is required at the current working …\nAn <code>AppHook</code> that wraps a <code>tide::Endpoint</code>, allowing something …\nRecords the current state of the app, to be passed during …\nA <code>PageVisit</code> struct capturing information about a single …\nA wrapper for <code>tide::Endpoint</code> which in itself is a …\nStores the state of the app.\nThe main function which starts the app using the given …\nHooks to be added to the tide App.\nA struct to log each visit to an endpoint of this app.\nStarts the host app.\nTasks creating Async futures\nAn <code>AppHook</code> that wraps a <code>tide::Endpoint</code>, allowing something …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWraps an <code>IsAppHook</code>+<code>tide::Endpoint</code> to create a\nRecords the current state of the app, to be passed during …\nAdd a new <code>Board</code> and insert it into the this app.\nConfigure this <code>AppState</code> with the provided …\nCreate a default <code>AppState</code> using the current UTC time.\nDrop a board by <code>Uuid</code>.\nThe <code>time::Duration</code> that had elapsed since the start of the …\nReturns the argument unchanged.\nGet a board by <code>Uuid</code>.\nGet a <code>BoardStatus</code> by <code>Uuid</code>.\nGet all the <code>StrikeReport</code>s that occured on the specified …\nCalls <code>U::from(self)</code>.\nList all the games.\nLog visit.\nCreate a default <code>AppState</code> using the current UTC time.\nCreate a new <code>Board</code> and insert it into this app.\nGet a new <code>Arc</code> reference to the internal termination token.\nStarts the host app.\n<code>Endpoint</code> for creating a new board.\n<code>Endpoint</code> for creating a new board.\n<code>Endpoint</code> for creating a new board.\n<code>Endpoint</code> for creating a new board.\n<code>Endpoint</code> for listing all the <code>Strike</code>s that occurred on a …\n<code>Endpoint</code> for creating a new board.\nSpecial Hook which is a <code>Endpoint</code>, but only for the …\n<code>Endpoint</code> for creating a new board.\nList all the strikes that occurred on a board.\nRoll the dice to see if we should simulate a failure.\nSpecial module only enabled if feature <code>simulate_failures</code> …\n<code>Endpoint</code> for creating a new board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AppStatusHook</code> from a <code>AppState</code>.\n<code>Endpoint</code> for creating a new board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BoardStatusHook</code> from a <code>AppState</code>.\n<code>Endpoint</code> for creating a new board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DropBoardHook</code> from a <code>AppState</code>.\n<code>Endpoint</code> for creating a new board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ListBoardsHook</code> from a <code>AppState</code>.\n<code>Endpoint</code> for listing all the <code>Strike</code>s that occurred on a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ListStrikesHook</code> from a <code>AppState</code>.\n<code>Endpoint</code> for creating a new board.\nParameters for the above <code>Endpoint</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>NewBoardHook</code> from a <code>AppState</code> behind a <code>RwLock</code>.\nSpecial Hook which is a <code>Endpoint</code>, but only for the …\nSimulate a 502 Bad Gateway.\nSimulate a 408 Request Timeout.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiate a new <code>SimulatedFailureHook</code>. This is not …\nRoll the dice to see if we should simulate a failure.\n<code>Endpoint</code> for creating a new board.\nParameters for the above <code>Endpoint</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StrikeHook</code> from a <code>AppState</code>.\nPossible queries for the <code>TerminationHook</code> <code>Endpoint</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TerminationHook</code> from a <code>AppState</code> behind an …\nA <code>PageVisit</code> struct capturing information about a single …\nReturns the argument unchanged.\nCreate a <code>PageVisit</code> instance from a pair of <code>tide::Request</code> …\nCalls <code>U::from(self)</code>.\nCreate a <code>PageVisit</code> instance from raw components.\nCreate the app an populate it with the routes we need.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TerminationToken</code> for termination signaling …\nNotify this <code>TerminationToken</code> to end.\nReplace the current result embedded in this …\nThe coroutine to listen for any termination notifications.\nSimple program to greet a person\nBinds the host to a custom hosting address.\nSets a custom JSON config file. Defaults to <code>./host.json</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinds the host to this custom port.\nSets the factor of which a request can fail. For instance, …\nThe default datetime format for use in this app.\nA struct to parse the configurations from <code>host.json</code>, or …\nMaximum number of retries for each ship before we give up.\nBinds the host to a hosting address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinds the host to this port.\nSerialize and Deserialize module for <code>DATETIME_FORMAT</code>.\nSets the factor of which a request can fail. For instance, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA struct to parse the configurations from <code>host.json</code>, or …\nBinds the host to a hosting address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinds the host to this port.\nSets the factor of which a request can fail. For instance, …\nA collection of all possible errors raised by the app.\n<code>host.json</code> contains invalid JSON.\n<code>host.json</code> was not found at the specified location.\nA requested position is out of the bounds of the board. …\nThe OS prevented the host from listening to <code>Ctrl-C</code> …\nThe feature requested is only enabled in debug mode.\nThe host is attempting to create a board with an existing …\nThe target board cannot be modified, as the game has …\nThe provided baord ID is not a well formatted <code>Uuid</code>.\nA query parameter provided is invalid.\nA return value had been computed, but the object failed to …\nA lock for an object is poisoned; execution cannot …\nThe provided <code>Uuid</code> does not match any existing boards.\nA mandatory query parameter is missing.\nA requested position is not available.\nA termination request had been sent with an error message. …\nThe server failed to start. This is typically caused by …\nA strike report had been requested on an empty position …\n<code>tide</code> encountered an error. The error message from <code>tide</code> …\nAn unknown error had occurred. Refer to the context for …\nGet the HTTP Status code for this error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the name of this error.\nAn enum for different log levels that appears differently.\nReturn the ANSI 8-bit colour code for this level.\nWrite a log line to <code>stderr</code> at the Critical level.\nWrite a log line to <code>stderr</code> at the Debug level.\nWrite a log line to <code>stderr</code> at the Error level.\nFormat a string for the requested level.\nReturns the argument unchanged.\nWrite a log line to <code>stderr</code> at the Info level.\nCalls <code>U::from(self)</code>.\nLog a string to <code>stderr</code> for the requested level.\nReturn the name for this level.\nReturn the suffix for this level.\nWrite a log line to <code>stderr</code> at the Trace level.\nWrite a log line to <code>stderr</code> at the Warning level.\nWraps the string in the corresponding colour.\nA brief summary of the status of the board.\nDenotes the position of on a board.\nOrientation of the ship.\nIndicates the state of a position on the grid.\nAn abridged status of a <code>Ship</code> for the purpose of returning …\nOrientation of the ship.\nAll possible ship types.\nRecording a <code>Strike</code>.\nA report for a strike, formatted for export.\nSerializable status of a <code>Board</code>, used for describing the …\nDefines orientation on the board.\nDefines orientation on the board.\nPossible types of ships.\nTraits\nTakes ownership of a ship, and attempt to add it to the …\nTakes ownership of a <code>Strike</code>, then perform the strike onto …\nThe <code>time::Duration</code> that had elapsed since the start of the …\nReturn an <code>Err</code> if frozen.\nFreeze this <code>Board</code>.\nReturns the argument unchanged.\nCheck if the player has won.\nThe height of this board.\nCalls <code>U::from(self)</code>.\nCheck the availability of the positions specified.\nReturn if this <code>Board</code> is frozen.\nCreate a new <code>Board</code> instance.\nSet state of some coordinates on the board to a specific …\nSet a slice of the board to a specific state.\nReturns a report of all the ships statuses without giving …\nReturn the number of ships remaining.\nReturn a public <code>BoardStatus</code> for this board.\nCount the number of <code>Strike</code>s on this <code>Board</code>.\nReturns a report of all the strikes that had been made.\nGet the identifier of a <code>Strike</code>.\nThe width of this board.\nA brief summary of the status of the board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDenotes the position of on a board.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Coordinates</code>.\nCreate a new <code>Coordinates</code> by shifting.\nCreate a new <code>Coordinates</code> by shifting downwards.\nCreate a new <code>Coordinates</code> by shifting rightwards.\nOrientation of the ship.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates the state of a position on the grid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRandomly generate a ship.\nCount the number of strikes this <code>Ship</code> had sustained.\nCheck if the two ships are the same.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the length of the ship.\nReturn the orientation of the ship.\nReturn the current status of the ship.\nAttempts to strike the ship.\nGet the identifier of a <code>Strike</code>.\nReturn the x position of the ship.\nReturn the y position of the ship.\nAn abridged status of a <code>Ship</code> for the purpose of returning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOrientation of the ship.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll possible ship types.\nWraps the &amp;<code>str</code> with the designated colour.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the label of this ship type.\nGet the length of this ship type.\nRecording a <code>Strike</code>.\nReturn the coordinates of the strike.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiate a new <code>Strike</code> object.\nGet the identifier of a <code>Strike</code>.\nReturn the x position of the strike.\nReturn the y position of the strike.\nA report for a strike, formatted for export.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StrikeReport</code> from raw data.\nTry create a <code>StrikeReport</code> from a <code>Coordinates</code>.\nAdd a value to <code>ships_remaining</code>.\nMarker trait for <code>tide::Endpoint</code>s that require access to an …\nA trait for anything that can be used as a URL query.\nA trait for structs that is linear on the board - has a …\nTrait to be implemnted by <code>tide::ResponseBuilder</code> to add …\nAdd default headers to a <code>tide::ResponseBuilder</code> to be …\nBuild a <code>tide::Response</code> from this instance.\nTrait: <code>IsAppHook</code>\nReturn the length of the segment.\nCreate a new instance from a <code>AppState</code> behind a <code>RwLock</code>.\nReturn the orientation of the segment.\nReturn the x position of the segment.\nReturn the y position of the segment.\nAdd default headers to a <code>tide::ResponseBuilder</code> to be …\nMarker trait for <code>tide::Endpoint</code>s that require access to an …\nCreate a new instance from a <code>AppState</code> behind a <code>RwLock</code>.\nA trait for anything that can be used as a URL query.\nTry parse a <code>tide::Request</code> instance.\nTry parse a <code>tide::Request</code> instance.\nBuild a <code>tide::Response</code> from this instance.\nA trait for structs that is linear on the board - has a …\nReturns the starting coordinates in an array.\nReturns the starting coordinates in an array.\nReturns the <code>n</code>-th <code>Coordinates</code> of this <code>Segment</code>.\nReturns the <code>n</code>-th <code>Coordinates</code> of this <code>Segment</code>.\nIterate through the <code>Coordinates</code> in this <code>Segment</code>.\nIterate through the <code>Coordinates</code> in this <code>Segment</code>.\nReturn the length of the segment.\nReturn the orientation of the segment.\nReturns the <code>SliceInfo</code> representing this <code>Segment</code>.\nReturns the <code>SliceInfo</code> representing this <code>Segment</code>.\nReturn the x position of the segment.\nReturn the y position of the segment.\nA special iterator class for iterating <code>Coordinates</code> through …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>IterSegment</code> from something that implements …")